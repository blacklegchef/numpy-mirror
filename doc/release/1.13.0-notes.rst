==========================
NumPy 1.13.0 Release Notes
==========================

This release supports Python 2.7 and 3.4 - 3.6.

Highlights
==========


Dropped Support
===============


Deprecations
============


Build System Changes
====================


Future Changes
==============


Compatibility notes
===================

Tuple object dtypes
~~~~~~~~~~~~~~~~~~~

Support has been removed for certain obscure dtypes that were unintentionally
allowed, of the form ``(old_dtype, new_dtype)``, where either of the dtypes
is or contains the ``object`` dtype. As an exception, dtypes of the form
``(object, [('name', object)])`` are still supported due to evidence of
existing use.

DeprecationWarning to error
~~~~~~~~~~~~~~~~~~~~~~~~~~~
See Changes section for more detail.

* ``partition``, TypeError when non-integer partition index is used.
* ``NpyIter_AdvancedNew``, ValueError when `oa_ndim == 0` and `op_axes` is NULL
* ``negative(bool_)``, TypeError when negative applied to booleans.
* ``subtract(bool_, bool_)``, TypeError when subtracting boolean from boolean.
* ``np.equal, np.not_equal``, object identity doesn't override failed comparison.
* ``np.equal, np.not_equal``, object identity doesn't override non-boolean comparison.
* Boolean indexing deprecated behavior dropped. See Changes below for details.

FutureWarning to changed behavior
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
See Changes section for more detail.

* ``numpy.average`` preserves subclasses
* ``array == None`` and ``array != None`` do element-wise comparison.
* ``np.equal, np.not_equal``, object identity doesn't override comparison result.


C API
~~~~~


New Features
============

``axes`` argument for ``unique``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In an N-dimensional array, the user can now choose the axis along which to look
for duplicate N-1-dimensional elements using ``numpy.unique``. The original
behaviour is recovered if ``axis=None`` (default).


Improvements
============

Partial support for 64-bit f2py extensions with MinGW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Extensions that incorporate Fortran libraries can now be built using the free
MinGW_ toolset, also under Python 3.5. This works best for extensions that only
do calculations and uses the runtime modestly (reading and writing from files,
for instance). Note that this does not remove the need for Mingwpy; if you make
extensive use of the runtime, you will most likely run into issues_. Instead,
it should be regarded as a band-aid until Mingwpy is fully functional.

.. _MinGW: https://sf.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/6.2.0/threads-win32/seh/

.. _issues: https://mingwpy.github.io/issues.html

Changes
=======

Ufunc behavior for overlapping inputs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Operations where ufunc input and output operands have memory overlap
produced undefined results in previous Numpy versions, due to data
dependency issues. In Numpy 1.13.0, results from such operations are
now defined to be the same as for equivalent operations where there is
no memory overlap.

Operations affected now make temporary copies, as needed to eliminate
data dependency. As detecting these cases is computationally
expensive, a heuristic is used, which may in rare cases result to
needless temporary copies.

To illustrate a previously undefined operation

   >>> x = np.arange(16).astype(float)
   >>> np.add(x[1:], x[:-1], out=x[1:])

In Numpy 1.13.0 the last line is guaranteed to be equivalent to

   >>> np.add(x[1:].copy(), x[:-1].copy(), out=x[1:])

The change applies also to in-place binary operations, for example::

    >>> x = np.random.rand(500, 500)
    >>> x += x.T

This statement is now guaranteed to be equivalent to ``x[...] = x + x.T``,
whereas in previous Numpy versions the results were undefined.

``average`` now preserves subclasses
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
For ndarray subclasses, ``numpy.average`` will now return an instance of the
subclass, matching the behavior of most other numpy functions such as ``mean``.
As a consequence, also calls that returned a scalar may now return a subclass
array scalar.

``array == None`` and ``array != None`` do element-wise comparison
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Previously these operations returned scalars ``False`` and ``True`` respectively.

``np.equal, np.not_equal`` for object arrays ignores object identity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Previously, these functions always treated identical objects as equal. This had
the effect of overriding comparison failures, comparison of objects that did
not return booleans, such as np.arrays, and comparison of objects where the
results differed from object identity, such as NaNs.

Boolean indexing changes
~~~~~~~~~~~~~~~~~~~~~~~~
* Boolean array-likes (such as lists of python bools) are always treated as
  boolean indexes.

* Boolean scalars (including python ``True``) are legal boolean indexes and
  never treated as integers.

* Boolean indexes must match the dimension of the axis that they index.

* Boolean indexes used on the lhs of an assigment must match the dimensions of
  the rhs.

* Boolean indexing into scalar arrays return a new 1-d array.  This means that
  ``array(1)[array(True)]`` gives ``array([1])`` and not the original array.

``np.random.multivariate_normal`` behavior with bad covariance matrix
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It is now possible to adjust the behavior the function will have when dealing
with the covariance matrix by using two new keyword arguments:

* ``tol`` can be used to specify a tolerance to use when checking that
  the covariance matrix is positive semidefinite.

* ``check_valid`` can be used to configure what the function will do in the
  presence of a matrix that is not positive semidefinite. Valid options are
  ``ignore``, ``warn`` and ``raise``. The default value, ``warn`` keeps the
  the behavior used on previous releases.

``assert_array_less`` compares ``np.inf`` and ``-np.inf`` now
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Previously, ``np.testing.assert_array_less`` ignored all infinite values. This
is not the expected behavior both according to documentation and intuitively.
Now, -inf < x < inf is considered ``True`` for any real number x and all
other cases fail.

``offset`` attribute value in ``memmap`` objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The ``offset`` attribute in a ``memmap`` object is now set to the
offset into the file. This is a behaviour change only for offsets
greater than ``mmap.ALLOCATIONGRANULARITY``.
