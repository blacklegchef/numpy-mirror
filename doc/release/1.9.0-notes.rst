NumPy 1.9.0 Release Notes
*************************

This release supports  Python 2.6 -2.7 and 3.2 - 3.3.


Highlights
==========


Dropped Support
===============

The oldnumeric and numarray modules have been removed.

Future Changes
==============


Compatibility notes
===================

Percentile output changes
~~~~~~~~~~~~~~~~~~~~~~~~~
If given more than one percentile to compute numpy.percentile returns an array
instead of a list. A single percentile still returns a scalar.
The array is equivalent to converting the the list returned in older versions
to an array via `np.array`.

If the `overwrite_input` option is used the input is only partially instead of
fully sorted.


New Features
============

Percentile supports more interpolation options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`np.percentile` now has the interpolation keyword argument to specify in which
way points should be interpolated if the percentiles fall between two values.
See the documentation for the available options.

Ufunc and Dot Overrides
~~~~~~~~~~~~~~~~~~~~~~~

For better compatibility with external objects you can now override universal
functions (ufuncs), ``numpy.core._dotblas.dot``, and
``numpy.core.multiarray.dot`` (the numpy.dot functions). By defining a
``__numpy_ufunc__`` method.

Dtype parameter added to `np.linspace` and `np.logspace`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The returned data type from the `linspace` and `logspace` functions
can now be specificed using the dtype parameter.

Improvements
============

Percentile implemented in terms of `np.partition`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`np.percentile` has been implemented interms of `np.partition` which only
partially sorts the data via a selection algorithm. This improves the time
complexcity from `O(nlog(n))` to `O(n)`.

Performance improvement for `np.array`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The performance of converting lists containing arrays to arrays using
`np.array` has been improved. It is now equivalent in speed to
`np.vstack(list)`.


Changes
=======

 
C-API
~~~~~

None

Deprecations
============

Non-integer scalars for sequence repetition
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Using non-integer numpy scalars to repeat python sequences is deprecated.
For example `np.float_(2) * [1]` will be an error in the future.

C-API
~~~~~

None


New Features
============

