/* -*- c -*- */

/*
 * The purpose of this module is to add faster sort functions
 * that are type-specific.  This is done by altering the
 * function table for the builtin descriptors.
 *
 * These sorting functions are copied almost directly from numarray
 * with a few modifications (complex comparisons compare the imaginary
 * part if the real parts are equal, for example), and the names
 * are changed.
 *
 * The original sorting code is due to Charles R. Harris who wrote
 * it for numarray.
 */

/*
 * Quick sort is usually the fastest, but the worst case scenario can
 * be slower than the merge and heap sorts.  The merge sort requires
 * extra memory and so for large arrays may not be useful.
 *
 * The merge sort is *stable*, meaning that equal components
 * are unmoved from their entry versions, so it can be used to
 * implement lexigraphic sorting on multiple keys.
 *
 * The heap sort is included for completeness.
 */

#define NPY_NO_DEPRECATED_API NPY_API_VERSION

#include <stdlib.h>
#include "npy_sort.h"
#include "npysort_common.h"

#define NOT_USED NPY_UNUSED(unused)
#define PYA_QS_STACK 100
#define SMALL_QUICKSORT 15
#define SMALL_MERGESORT 20
#define SMALL_STRING 16


/*
 *****************************************************************************
 **                            NUMERIC SORTS                                **
 *****************************************************************************
 */


/**begin repeat
 *
 * #TYPE = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *         LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *         CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #suff = bool, byte, ubyte, short, ushort, int, uint, long, ulong,
 *         longlong, ulonglong, half, float, double, longdouble,
 *         cfloat, cdouble, clongdouble#
 * #type = npy_bool, npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int,
 *         npy_uint, npy_long, npy_ulong, npy_longlong, npy_ulonglong,
 *         npy_ushort, npy_float, npy_double, npy_longdouble, npy_cfloat,
 *         npy_cdouble, npy_clongdouble#
 */

static void
mergesort0_@suff@(@type@ *pl, @type@ *pr, @type@ *pw)
{
    @type@ vp, *pi, *pj, *pk, *pm;

    if (pr - pl > SMALL_MERGESORT) {
        /* merge sort */
        pm = pl + ((pr - pl) >> 1);
        mergesort0_@suff@(pl, pm, pw);
        mergesort0_@suff@(pm, pr, pw);
        for (pi = pw, pj = pl; pj < pm;) {
            *pi++ = *pj++;
        }
        pj = pw;
        pk = pl;
        while (pj < pi && pm < pr) {
            if (@TYPE@_LT(*pm, *pj)) {
                *pk = *pm++;
            }
            else {
                *pk = *pj++;
            }
            pk++;
        }
        while(pj < pi) {
            *pk++ = *pj++;
        }
    }
    else {
        /* insertion sort */
        for (pi = pl + 1; pi < pr; ++pi) {
            vp = *pi;
            pj = pi;
            pk = pi -1;
            while (pj > pl && @TYPE@_LT(vp, *pk)) {
                *pj-- = *pk--;
            }
            *pj = vp;
        }
    }
}


int
mergesort_@suff@(@type@ *start, npy_intp num, void *NOT_USED)
{
    @type@ *pl, *pr, *pw;

    pl = start;
    pr = pl + num;
    pw = (@type@ *) PyDataMem_NEW((num/2)*sizeof(@type@));
    if (!pw) {
        PyErr_NoMemory();
        return -1;
    }
    mergesort0_@suff@(pl, pr, pw);

    PyDataMem_FREE(pw);
    return 0;
}


static void
amergesort0_@suff@(npy_intp *pl, npy_intp *pr, @type@ *v, npy_intp *pw)
{
    @type@ vp;
    npy_intp vi, *pi, *pj, *pk, *pm;

    if (pr - pl > SMALL_MERGESORT) {
        /* merge sort */
        pm = pl + ((pr - pl + 1)>>1);
        amergesort0_@suff@(pl, pm-1, v, pw);
        amergesort0_@suff@(pm, pr, v, pw);
        for (pi = pw, pj = pl; pj < pm; ++pi, ++pj) {
            *pi = *pj;
        }
        for (pk = pw, pm = pl; pk < pi && pj <= pr; ++pm) {
            if (@TYPE@_LT(v[*pj], v[*pk])) {
                *pm = *pj;
                ++pj;
            }
            else {
                *pm = *pk;
                ++pk;
            }
        }
        for (; pk < pi; ++pm, ++pk) {
            *pm = *pk;
        }
    }
    else {
        /* insertion sort */
        for (pi = pl + 1; pi <= pr; ++pi) {
            vi = *pi;
            vp = v[vi];
            for (pj = pi, pk = pi - 1; pj > pl && @TYPE@_LT(vp, v[*pk]); --pj, --pk) {
                *pj = *pk;
            }
            *pj = vi;
        }
    }
}


int
amergesort_@suff@(@type@ *v, npy_intp *tosort, npy_intp num, void *NOT_USED)
{
    npy_intp *pl, *pr, *pw;

    pl = tosort; pr = pl + num - 1;
    pw = PyDimMem_NEW((1+num/2));

    if (!pw) {
        PyErr_NoMemory();
        return -1;
    }

    amergesort0_@suff@(pl, pr, v, pw);
    PyDimMem_FREE(pw);

    return 0;
}

/**end repeat**/


/*
 *****************************************************************************
 **                             STRING SORTS                                **
 *****************************************************************************
 */


/**begin repeat
 *
 * #TYPE = STRING, UNICODE#
 * #suff = string, unicode#
 * #type = npy_char, npy_ucs4#
 */

static void
mergesort0_@suff@(@type@ *pl, @type@ *pr, @type@ *pw, @type@ *vp, size_t len)
{
    @type@ *pi, *pj, *pk, *pm;

    if ((size_t)(pr - pl) > SMALL_MERGESORT*len) {
        /* merge sort */
        pm = pl + (((pr - pl)/len) >> 1)*len;
        mergesort0_@suff@(pl, pm, pw, vp, len);
        mergesort0_@suff@(pm, pr, pw, vp, len);
        @TYPE@_COPY(pw, pl, pm - pl);
        pi = pw + (pm - pl);
        pj = pw;
        pk = pl;
        while (pj < pi && pm < pr) {
            if (@TYPE@_LT(pm, pj, len)) {
                @TYPE@_COPY(pk, pm, len);
                pm += len;
            }
            else {
                @TYPE@_COPY(pk, pj, len);
                pj += len;
            }
            pk += len;
        }
        @TYPE@_COPY(pk, pj, pi - pj);
    }
    else {
        /* insertion sort */
        for (pi = pl + len; pi < pr; pi += len) {
            @TYPE@_COPY(vp, pi, len);
            pj = pi;
            pk = pi - len;
            while (pj > pl && @TYPE@_LT(vp, pk, len)) {
                @TYPE@_COPY(pj, pk, len);
                pj -= len;
                pk -= len;
            }
            @TYPE@_COPY(pj, vp, len);
        }
    }
}


int
mergesort_@suff@(@type@ *start, npy_intp num, PyArrayObject *arr)
{
    const size_t elsize = PyArray_ITEMSIZE(arr);
    const size_t len = elsize / sizeof(@type@);
    @type@ *pl, *pr, *pw, *vp;
    int err = 0;

    pl = start;
    pr = pl + num*len;
    pw = (@type@ *) PyDataMem_NEW((num/2)*elsize);
    if (!pw) {
        PyErr_NoMemory();
        err = -1;
        goto fail_0;
    }
    vp = (@type@ *) PyDataMem_NEW(elsize);
    if (!vp) {
        PyErr_NoMemory();
        err = -1;
        goto fail_1;
    }
    mergesort0_@suff@(pl, pr, pw, vp, len);

    PyDataMem_FREE(vp);
fail_1:
    PyDataMem_FREE(pw);
fail_0:
    return err;
}


static void
amergesort0_@suff@(npy_intp *pl, npy_intp *pr, @type@ *v, npy_intp *pw, int len)
{
    @type@ *vp;
    npy_intp vi, *pi, *pj, *pk, *pm;

    if (pr - pl > SMALL_MERGESORT) {
        /* merge sort */
        pm = pl + ((pr - pl) >> 1);
        amergesort0_@suff@(pl, pm, v, pw, len);
        amergesort0_@suff@(pm, pr, v, pw, len);
        for (pi = pw, pj = pl; pj < pm;) {
            *pi++ = *pj++;
        }
        pj = pw;
        pk = pl;
        while (pj < pi && pm < pr) {
            if (@TYPE@_LT(v + (*pm)*len, v + (*pj)*len, len)) {
                *pk = *pm++;
            } else {
                *pk = *pj++;
            }
            pk++;
        }
        while (pj < pi) {
            *pk++ = *pj++;
        }
    } else {
        /* insertion sort */
        for (pi = pl + 1; pi < pr; ++pi) {
            vi = *pi;
            vp = v + vi*len;
            pj = pi;
            pk = pi -1;
            while (pj > pl && @TYPE@_LT(vp, v + (*pk)*len, len)) {
                *pj-- = *pk--;
            }
            *pj = vi;
        }
    }
}


int
amergesort_@suff@(@type@ *v, npy_intp *tosort, npy_intp num, PyArrayObject *arr)
{
    const size_t elsize = PyArray_ITEMSIZE(arr);
    const size_t len = elsize / sizeof(@type@);
    npy_intp *pl, *pr, *pw;

    pl = tosort;
    pr = pl + num;
    pw = PyDimMem_NEW(num/2);
    if (!pw) {
        PyErr_NoMemory();
        return -1;
    }
    amergesort0_@suff@(pl, pr, v, pw, len);

    PyDimMem_FREE(pw);
    return 0;
}

/**end repeat**/
