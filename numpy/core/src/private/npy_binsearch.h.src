#ifndef __NPY_BINSEARCH_H__
#define __NPY_BINSEARCH_H__

#include "npy_sort.h"

/* Python include is for future object sorts */
#include <Python.h>
#include <numpy/npy_common.h>
#include <numpy/ndarraytypes.h>


typedef void (PyArray_BinSearchFunc)(const char *, const char *, char *,
                                     npy_intp, npy_intp,
                                     npy_intp, npy_intp, npy_intp);

typedef int (PyArray_ArgBinSearchFunc)(const char *, const char *,
                                       const char *, char *,
                                       npy_intp, npy_intp, npy_intp,
                                       npy_intp, npy_intp, npy_intp);

typedef struct{
    enum NPY_TYPES typenum;
    PyArray_BinSearchFunc *binsearch[NPY_NSEARCHSIDES];
} binsearch_map;

typedef struct{
    enum NPY_TYPES typenum;
    PyArray_ArgBinSearchFunc *argbinsearch[NPY_NSEARCHSIDES];
} argbinsearch_map;


/**begin repeat
 *
 * #suff = bool, byte, ubyte, short, ushort, int, uint, long, ulong,
 *         longlong, ulonglong, half, float, double, longdouble,
 *         cfloat, cdouble, clongdouble, datetime, timedelta#
 */
/**begin repeat1
 *
 * #side = left, right#
 */
void
binsearch_@side@_@suff@(const char *arr, const char *key, char *ret,
                        npy_intp arr_len, npy_intp key_len,
                        npy_intp arr_str, npy_intp key_str,
                        npy_intp ret_str);
int
argbinsearch_@side@_@suff@(const char *arr, const char *key,
                           const char *sort, char *ret,
                           npy_intp arr_len, npy_intp key_len,
                           npy_intp arr_str, npy_intp key_str,
                           npy_intp sort_str, npy_intp ret_str);
/**end repeat1**/
/**end repeat**/

/**begin repeat
 *
 * #side = left, right#
 */
void
npy_binsearch_@side@(const char *arr, const char *key, char *ret,
                     npy_intp arr_len, npy_intp key_len,
                     npy_intp arr_str, npy_intp key_str,
                     npy_intp ret_str, npy_comparator cmp);
int
npy_argbinsearch_@side@(const char *arr, const char *key,
                        const char *sort, char *ret,
                        npy_intp arr_len, npy_intp key_len,
                        npy_intp arr_str, npy_intp key_str,
                        npy_intp sort_str, npy_intp ret_str,
                        npy_comparator cmp);
/**end repeat**/

/**begin repeat
 *
 * #arg = , arg#
 * #Arg = , Arg#
 */
static NPY_INLINE PyArray_@Arg@BinSearchFunc*
get_@arg@binsearch_func(int type, NPY_SEARCHSIDE side)
{
    static @arg@binsearch_map _@arg@binsearch_map[] = {
        /**begin repeat1
         *
         * #TYPE = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
         *         LONGLONG, ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE,
         *         CFLOAT, CDOUBLE, CLONGDOUBLE, DATETIME, TIMEDELTA#
         * #suff = bool, byte, ubyte, short, ushort, int, uint, long, ulong,
         *         longlong, ulonglong, half, float, double, longdouble,
         *         cfloat, cdouble, clongdouble, datetime, timedelta#
         */
        {NPY_@TYPE@,
            {
                /**begin repeat2
                 *
                 * #side = left, right#
                 */
                &@arg@binsearch_@side@_@suff@,
                /**end repeat2**/
            },
        },
        /**end repeat1**/
    };
    
    static npy_intp num_funcs = sizeof(_@arg@binsearch_map) /
                                sizeof(_@arg@binsearch_map[0]);
    
    npy_intp min_idx = 0,
             max_idx = num_funcs;
             
    if (side >= NPY_NSEARCHSIDES) {
        return NULL;
    }
    
    /* It seems only fair that a binary search function be searched for
     * using a binary search...
     */
    while (min_idx < max_idx) {
        npy_intp mid_idx = min_idx + ((max_idx - min_idx) >> 1);
        if (_@arg@binsearch_map[mid_idx].typenum < type) {
            min_idx = mid_idx + 1;
        }
        else {
            max_idx = mid_idx;
        }
    }
    
    if (_@arg@binsearch_map[min_idx].typenum == type) {
        return _@arg@binsearch_map[min_idx].@arg@binsearch[side];
    }
    else {
        return NULL;
    }
}
/**end repeat**/

#endif
